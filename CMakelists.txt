cmake_minimum_required(VERSION 3.25)
project(ksc4cpp)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")
find_package(WDK REQUIRED)



function(ksc4pp_add_shellcode _target)
    cmake_parse_arguments(WDK "" "KMDF;WINVER;NTDDI_VERSION" "" ${ARGN})

    add_executable(${_target} ${WDK_UNPARSED_ARGUMENTS})
    # add include directories

    set_target_properties(${_target} PROPERTIES SUFFIX ".sys")
    set_target_properties(${_target} PROPERTIES COMPILE_OPTIONS "${WDK_COMPILE_FLAGS}")
    set_target_properties(${_target} PROPERTIES COMPILE_DEFINITIONS
        "${WDK_COMPILE_DEFINITIONS};$<$<CONFIG:Debug>:${WDK_COMPILE_DEFINITIONS_DEBUG}>;_WIN32_WINNT=${WDK_WINVER}"
    )
    set_target_properties(${_target} PROPERTIES LINK_FLAGS "${WDK_LINK_FLAGS}")

    if(WDK_NTDDI_VERSION)
        target_compile_definitions(${_target} PRIVATE NTDDI_VERSION=${WDK_NTDDI_VERSION})
    endif()

    target_include_directories(${_target} PRIVATE ${CMAKE_CURRENT_FUNCTION_LIST_DIR}/include)
    target_include_directories(${_target} SYSTEM PRIVATE
        "${WDK_ROOT}/Include/${WDK_INC_VERSION}/shared"
        "${WDK_ROOT}/Include/${WDK_INC_VERSION}/km"
        "${WDK_ROOT}/Include/${WDK_INC_VERSION}/km/crt"
    )

    target_link_libraries(${_target} WDK::NTOSKRNL WDK::HAL WDK::WMILIB)

    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
        target_link_libraries(${_target} WDK::MEMCMP)
    endif()

    set_property(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS "/ENTRY:SCBegin")

    if(DEFINED WDK_KMDF)
        target_include_directories(${_target} SYSTEM PRIVATE "${WDK_ROOT}/Include/wdf/kmdf/${WDK_KMDF}")
        target_link_libraries(${_target}
            "${WDK_ROOT}/Lib/wdf/kmdf/${WDK_PLATFORM}/${WDK_KMDF}/WdfDriverEntry.lib"
            "${WDK_ROOT}/Lib/wdf/kmdf/${WDK_PLATFORM}/${WDK_KMDF}/WdfLdr.lib"
        )
    endif()

    set_target_properties(${_target}
        PROPERTIES
        VS_PLATFORM_TOOLSET ClangCL)
    set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX "-imsvc" PARENT_SCOPE)
    set(CMAKE_INCLUDE_SYSTEM_FLAG_C "-imsvc" PARENT_SCOPE)

    set(COMPILE_FLAGS "/O2" "/Os" "/MT" "/GS-" "/Gs1048576" "-mno-sse" "-Wno-address-of-temporary")
    set_target_properties(${_target} PROPERTIES COMPILE_OPTIONS "${COMPILE_FLAGS}")


    # add custom command to sign the driver
    add_custom_command(TARGET ${_target} POST_BUILD
        COMMAND py -3 "${CMAKE_CURRENT_FUNCTION_LIST_DIR}/tools/scextractor.py" $<TARGET_FILE:${_target}>
    )
endfunction()

add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/test/shellcode")
add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/test/shellcodetester")